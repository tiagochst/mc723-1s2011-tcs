/******************************************************
 * Instruction Set Architecture header file.          *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef _RS08_ISA_H
#define _RS08_ISA_H

#include "rs08_parms.H"
#include "ac_instr.H"
#include "ac_decoder_rt.H"
#include "ac_instr_info.H"
#include "rs08_arch.H"
#include "rs08_arch_ref.H"

namespace rs08_parms
{
class rs08_isa: public rs08_arch_ref {
private:
typedef ac_instr<AC_DEC_FIELD_NUMBER> ac_instr_t;

public:
  static ac_dec_field fields[AC_DEC_FIELD_NUMBER];
  static ac_dec_format formats[AC_DEC_FORMAT_NUMBER];
  static ac_dec_list dec_list[AC_DEC_LIST_NUMBER];
  static ac_dec_instr instructions[AC_DEC_INSTR_NUMBER];
  static const ac_instr_info instr_table[AC_DEC_INSTR_NUMBER + 1];

  ac_decoder_full* decoder;

  int cur_instr_id;

  //!Constructor.
  rs08_isa(rs08_arch& ref) : rs08_arch_ref(ref) {
    //!Building Decoder.
    decoder = ac_decoder_full::CreateDecoder(rs08_isa::formats, rs08_isa::instructions, &ref);
  }

  inline char* get_name() { return instr_table[cur_instr_id].ac_instr_name; }
  inline char* get_mnemonic() { return instr_table[cur_instr_id].ac_instr_mnemonic; }
  inline unsigned get_size() { return instr_table[cur_instr_id].ac_instr_size; };
  inline unsigned get_cycles() { return instr_table[cur_instr_id].ac_instr_cycles; };
  inline unsigned get_min_latency() { return instr_table[cur_instr_id].ac_instr_min_latency; };
  inline unsigned get_max_latency() { return instr_table[cur_instr_id].ac_instr_max_latency; };

  void _behavior_instruction(unsigned int op);

  void _behavior_begin();
  void _behavior_end();

  void _behavior_rs08_Type_IMM(unsigned int op, unsigned int byte2);
  void _behavior_rs08_Type_IMD(unsigned int op, unsigned int byte2, unsigned int addr3);
  void _behavior_rs08_Type_IMM_DIR(unsigned int op, unsigned int byte2);
  void _behavior_rs08_Type_DIR(unsigned int op, unsigned int addr2);
  void _behavior_rs08_Type_DD(unsigned int op, unsigned int byte2, unsigned int byte3);
  void _behavior_rs08_Type_REL(unsigned int op, unsigned int addr2);
  void _behavior_rs08_Type_INH(unsigned int op);
  void _behavior_rs08_Type_EXT(unsigned int op, unsigned int addr);

  void behavior_adci(unsigned int op, unsigned int byte2);
  void behavior_andi(unsigned int op, unsigned int byte2);
  void behavior_cmpi(unsigned int op, unsigned int byte2);
  void behavior_eori(unsigned int op, unsigned int byte2);
  void behavior_ldai(unsigned int op, unsigned int byte2);
  void behavior_orai(unsigned int op, unsigned int byte2);
  void behavior_subi(unsigned int op, unsigned int byte2);
  void behavior_movi(unsigned int op, unsigned int byte2, unsigned int addr3);
  void behavior_addi(unsigned int op, unsigned int byte2);
  void behavior_add(unsigned int op, unsigned int addr2);
  void behavior_adc(unsigned int op, unsigned int addr2);
  void behavior_sub(unsigned int op, unsigned int addr2);
  void behavior_inc(unsigned int op, unsigned int addr2);
  void behavior_dec(unsigned int op, unsigned int addr2);
  void behavior_cmp(unsigned int op, unsigned int addr2);
  void behavior_clr(unsigned int op, unsigned int addr2);
  void behavior_and(unsigned int op, unsigned int addr2);
  void behavior_ora(unsigned int op, unsigned int addr2);
  void behavior_eor(unsigned int op, unsigned int addr2);
  void behavior_lda(unsigned int op, unsigned int addr2);
  void behavior_sta(unsigned int op, unsigned int addr2);
  void behavior_mov(unsigned int op, unsigned int byte2, unsigned int byte3);
  void behavior_beq(unsigned int op, unsigned int addr2);
  void behavior_lsra(unsigned int op);
  void behavior_lsla(unsigned int op);
  void behavior_rola(unsigned int op);
  void behavior_rora(unsigned int op);
  void behavior_jmp(unsigned int op, unsigned int addr);

};
};



#endif //_RS08_ISA_H

